
// For those who want the bleeding edge
buildscript {
    repositories {
        gradlePluginPortal()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sponge"
            url = "https://repo.spongepowered.org/repository/maven-public/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        // classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

// plugins {
//     id "maven"
//     id "com.github.johnrengelman.shadow" version "4.0.4"
// }

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/
version = "1.0"
group= "com.diamondgoobird.test" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "testmod"

sourceCompatibility = targetCompatibility = 1.8


repositories {
    jcenter()
    gradlePluginPortal()
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/repository/maven-public/"
    }
    mavenCentral()
    maven { url "https://repo.sk1er.club/repository/maven-public" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url 'https://repo.spongepowered.org/maven' }
    maven { url 'https://jitpack.io' }
}

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    implementation("org.spongepowered:mixin:0.6-SNAPSHOT") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }
    embed "gg.essential:loader-launchwrapper:1.1.3"
    // implementation("net.dv8tion:JDA:5.0.0-beta.23") {
    //     // exclude module: 'opus-java'
    // }
    implementation "gg.essential:essential-1.8.9-forge:3760"
    implementation ("gg.essential:vigilance-1.8.9-forge:288")
    implementation("gg.essential:elementa-1.8.9-forge:600")
}

mixin {
    defaultObfuscationEnv = "searge"
    add sourceSets.main, "mixins.test.refmap.json"
}

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    clientJvmArgs = ["-Xmx2G"]
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_20"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}


processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest.attributes(
            "MixinConfigs": 'mixins.test.json',
            "ModSide": "CLIENT",
            "ForceLoadAsMod": "true",
            "TweakClass" : "gg.essential.loader.stage0.EssentialSetupTweaker",
            "FMLCorePluginContainsFMLMod": 'true',
            "Manifest-Version": 1.0
    )

    configurations.embed.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

runClient {
    jvmArgs "-Xmx1024m", "-Xms1024m"
}

// shadowJar {
//     classifier = "diamond"
//     dependencies {
//         include(dependency("net.dv8tion:JDA:5.0.0-beta.23"))
//     }
//     manifest.attributes(
//             "MixinConfigs": 'mixins.test.json',
//             "ModSide": "CLIENT",
//             "ForceLoadAsMod": "true",
//             "TweakClass" : "gg.essential.loader.stage0.EssentialSetupTweaker",
//             "FMLCorePluginContainsFMLMod": 'true',
//             "Manifest-Version": 1.0
//     )
// }
// tasks.build.dependsOn shadowJar
// artifacts {
//     archives shadowJar
// }
// reobf {
//     shadowJar {
//         mappingType = "searge"
//     }
// }
// tasks.reobfShadowJar.mustRunAfter shadowJar
// tasks.build.dependsOn reobfShadowJar